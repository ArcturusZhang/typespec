// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using UnbrandedTypeSpec;

namespace UnbrandedTypeSpec.Models
{
    /// <summary></summary>
    public partial class FriendBase : IJsonModel<FriendBase>
    {
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        internal FriendBase(string baseProperty, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BaseProperty = baseProperty;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        void IJsonModel<FriendBase>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FriendBase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FriendBase)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(BaseProperty))
            {
                writer.WritePropertyName("baseProperty"u8);
                writer.WriteStringValue(BaseProperty);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        FriendBase IJsonModel<FriendBase>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            throw new NotImplementedException("Not implemented");
        }

        BinaryData IPersistableModel<FriendBase>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FriendBase>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FriendBase)} does not support writing '{options.Format}' format.");
            }
        }

        FriendBase IPersistableModel<FriendBase>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            throw new NotImplementedException("Not implemented");
        }

        string IPersistableModel<FriendBase>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="friendBase"> The <see cref="FriendBase"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(FriendBase friendBase)
        {
            throw new NotImplementedException("Not implemented");
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="FriendBase"/> from. </param>
        public static explicit operator FriendBase(ClientResult result)
        {
            throw new NotImplementedException("Not implemented");
        }
    }
}
